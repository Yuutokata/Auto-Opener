# Name of the GitHub Actions workflow. This name is displayed in the GitHub Actions UI.
name: Upload to Pterodactyl

# Controls when the workflow will run.
on:
  # Triggers the workflow on push events.
  push:
    # Specifies the branch to monitor for push events.
    # Change 'main' to your repository's default branch if it's different (e.g., master).
    branches:
      - main

# Defines the jobs to be executed in the workflow. Jobs run in parallel by default.
jobs:
  # Job 1: Build the project with Gradle
  build:
    # Specifies the type of runner that the job will run on.
    # 'ubuntu-latest' uses the latest available version of an Ubuntu runner.
    runs-on: ubuntu-latest

    # A sequence of tasks called steps that make up the 'build' job.
    steps:
      # Step 1: Checkout repository code
      # This action checks-out your repository under $GITHUB_WORKSPACE,
      # so your workflow can access its contents.
      - name: Checkout code
        uses: actions/checkout@v4 # Using v4 for the latest features and security updates.

      # Step 2: Set up JDK
      # Sets up a specific version of the Java Development Kit (JDK) for use in the workflow.
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21' # Specify the Java version
          distribution: 'temurin' # Specify the distribution

      # Step 3: Make Gradle Wrapper executable
      # Ensures that the Gradle Wrapper script (gradlew) has execute permissions.
      # This is required to run Gradle commands using the wrapper.
      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      # Step 4: Build the project with Gradle
      # Executes the 'assembleDist' task using the Gradle Wrapper.
      # This task builds the distribution artifacts (lib and bin folders).
      - name: Assemble Distribution
        run: ./gradlew assembleDist

      - name: List lib directory
        run: ls


  # Job 2: Upload files to Pterodactyl server
  upload:
    # Specifies that the 'upload' job requires the 'build' job to complete successfully before it can start.
    needs: build
    # Specifies the type of runner that the job will run on.
    # 'ubuntu-latest' uses the latest available version of an Ubuntu runner.
    runs-on: ubuntu-latest

    # A sequence of tasks called steps that make up the 'upload' job.
    steps:
      # Step 1: Checkout repository code
      # This action checks-out your repository under $GITHUB_WORKSPACE,
      # so your workflow can access its contents.
      - name: Checkout code
        uses: actions/checkout@v4 # Using v4 for the latest features and security updates.

      # Step 2: Upload files to Pterodactyl server
      # This action utilizes the 'pterodactyl/upload-files' community action
      # to transfer files from the repository to the specified Pterodactyl server.
      # Note: While '@latest' is used here as per potential user preference for always using the newest version,
      # for production workflows, it's often recommended to pin actions to a specific version tag
      # (e.g., pterodactyl/upload-files@v1.0.0) or a commit SHA to ensure stability and prevent unexpected breaking changes.
      - name: Upload files to Pterodactyl
        uses: rexlmanu/pterodactyl-upload-action@v2.1
        with:
          # The Panel URL of your Pterodactyl instance (e.g., https://panel.example.com).
          # This should be configured as a secret in your GitHub repository settings (e.g., PTERODACTYL_PANEL_URL).
          panel-host: ${{ secrets.PANEL_HOST }} # Uncomment and configure if your action version requires it.

          # The ID of your Pterodactyl server.
          # This should be configured as a secret in your GitHub repository settings (e.g., PTERODACTYL_SERVER_ID).
          server-id: ${{ secrets.SERVER_ID }}

          # Your Pterodactyl panel API key (Client API Key).
          # This should be configured as a secret for security (e.g., PTERODACTYL_API_KEY).
          # Ensure the API key has permissions to access and modify files for the specified server.
          api-key: ${{ secrets.API_KEY }}

          # Source files to be uploaded (relative to the repository root).
          # Specifies the 'lib' and 'bin' directories as the source for files to upload.
          sources: |
            lib
            bin

          # The target directory on the Pterodactyl server where the files will be uploaded.
          # './' indicates the root directory of the server.
          target: ./

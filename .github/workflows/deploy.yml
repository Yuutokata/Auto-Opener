# Name of the GitHub Actions workflow. This name is displayed in the GitHub Actions UI.
name: Upload to Pterodactyl

# Controls when the workflow will run.
on:
  # Triggers the workflow on push events.
  push:
    # Specifies the branch to monitor for push events.
    # Change 'main' to your repository's default branch if it's different (e.g., master).
    branches:
      - main

# Defines the jobs to be executed in the workflow. Jobs run in parallel by default.
jobs:
  # Job 1: Build the project with Gradle
  build:
    # Specifies the type of runner that the job will run on.
    # 'ubuntu-latest' uses the latest available version of an Ubuntu runner.
    runs-on: ubuntu-latest

    # A sequence of tasks called steps that make up the 'build' job.
    steps:
      # Step 1: Checkout repository code
      # This action checks-out your repository under $GITHUB_WORKSPACE,
      # so your workflow can access its contents.
      - name: Checkout code
        uses: actions/checkout@v4 # Using v4 for the latest features and security updates.

      # Step 2: Set up JDK
      # Sets up a specific version of the Java Development Kit (JDK) for use in the workflow.
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21' # Specify the Java version
          distribution: 'temurin' # Specify the distribution

      # Step 3: Make Gradle Wrapper executable
      # Ensures that the Gradle Wrapper script (gradlew) has execute permissions.
      # This is required to run Gradle commands using the wrapper.
      - name: Make Gradle Wrapper executable
        run: chmod +x ./gradlew

      # Step 4: Build the project with Gradle
      # Executes the 'assembleDist' task using the Gradle Wrapper.
      # This task builds the distribution artifacts.
      - name: Assemble Distribution
        run: ./gradlew assembleDist

      # Step 5: Find distribution file
      # Finds the distribution file in the build/distributions directory.
      - name: Find distribution file
        id: find_dist
        run: |
          cd ./build/distributions
          DIST_FILE=$(ls *.tar)
          echo "dist_file=$DIST_FILE" >> $GITHUB_OUTPUT
          echo "dist_path=$(pwd)" >> $GITHUB_OUTPUT

      # Step 6: Unpack distribution file
      # Unpacks the distribution file.
      - name: Unpack distribution file
        run: |
          cd ${{ steps.find_dist.outputs.dist_path }}
          tar -xf ${{ steps.find_dist.outputs.dist_file }}

      # Step 7: Set directory for lib and bin
      # Set the directory where lib and bin folders are located
      - name: Set directory for lib and bin
        id: set_dir
        run: |
          cd ${{ steps.find_dist.outputs.dist_path }}
          EXTRACTED_FOLDER=$(ls -d */ | head -n 1)
          echo "extracted_folder=$EXTRACTED_FOLDER" >> $GITHUB_OUTPUT

      # Step 8: List lib directory
      # Lists the contents of the lib directory to confirm that the build was successful.
      - name: List lib directory
        run: ls -l ./build/distributions/${{ steps.set_dir.outputs.extracted_folder }}lib

      # Step 9: List bin directory
      # Lists the contents of the bin directory to confirm that the build was successful.
      - name: List bin directory
        run: ls -l ./build/distributions/${{ steps.set_dir.outputs.extracted_folder }}bin

      # Step 10: Upload distribution artifact (NEW STEP)
      # This step uploads the contents of the extracted distribution folder,
      # which includes the lib and bin directories.
      - name: Upload distribution artifact
        uses: actions/upload-artifact@v4 # Using v4 for the latest features
        with:
          name: app-distribution # Name of the artifact
          path: ./build/distributions/${{ steps.set_dir.outputs.extracted_folder }}
          # This path should point to the directory containing your lib and bin folders.
          # It will upload the contents of this directory.
          if-no-files-found: error # Optional: causes the workflow to fail if no files are found

  # Job 2: Upload files to Pterodactyl server
  upload:
    # Specifies that the 'upload' job requires the 'build' job to complete successfully before it can start.
    needs: build
    # Specifies the type of runner that the job will run on.
    # 'ubuntu-latest' uses the latest available version of an Ubuntu runner.
    runs-on: ubuntu-latest

    # A sequence of tasks called steps that make up the 'upload' job.
    steps:
      # Step 1: Checkout repository code
      # This action checks-out your repository under $GITHUB_WORKSPACE,
      # so your workflow can access its contents.
      - name: Checkout code
        uses: actions/checkout@v4 # Using v4 for the latest features and security updates.

 # Step 2: Download build artifacts (NEW STEP)
      # Downloads the artifact uploaded by the 'build' job.
      - name: Download build artifacts
        uses: actions/download-artifact@v4 # Using v4 for the latest features
        with:
          name: app-distribution # Must match the name used in upload-artifact
          path: ./pterodactyl-files # Destination path for downloaded artifact
          # The artifact's contents (lib, bin folders) will be placed inside ./pterodactyl-files

      # Step 3: Upload files to Pterodactyl server (MODIFIED STEP)
      # This action utilizes the 'rexlManu/pterodactyl-upload-action'
      # to transfer files to the specified Pterodactyl server.
      - name: Upload files to Pterodactyl
        uses: rexlManu/pterodactyl-upload-action@v2.5
        with:
          panel-host: ${{ secrets.PANEL_HOST }}
          server-id: ${{ secrets.SERVER_ID }}
          api-key: ${{ secrets.API_KEY }}
          # MODIFIED: Source files now point to the downloaded artifacts
          sources: |
            ./pterodactyl-files/lib
            ./pterodactyl-files/bin
          target: ./ # Target directory on Pterodactyl server
